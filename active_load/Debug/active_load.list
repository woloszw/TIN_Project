
active_load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bbc  08004bbc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004bbc  08004bbc  00014bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bc4  08004bc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc8  08004bc8  00014bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000010  08004bdc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004bdc  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b6c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002358  00000000  00000000  00034bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  000380c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed6c  00000000  00000000  000391c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147c6  00000000  00000000  00057f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea2f  00000000  00000000  0006c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca4  00000000  00000000  0013b174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b64 	.word	0x08004b64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004b64 	.word	0x08004b64

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

uint32_t duty_cycle = 3800;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052c:	d118      	bne.n	8000560 <HAL_GPIO_EXTI_Callback+0x44>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800052e:	2120      	movs	r1, #32
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f001 f8f2 	bl	800171c <HAL_GPIO_TogglePin>

			if(duty_cycle > 4900){
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_GPIO_EXTI_Callback+0x4c>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f241 3224 	movw	r2, #4900	; 0x1324
 8000540:	4293      	cmp	r3, r2
 8000542:	d904      	bls.n	800054e <HAL_GPIO_EXTI_Callback+0x32>
				duty_cycle = 3500;}
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000546:	f640 52ac 	movw	r2, #3500	; 0xdac
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	e004      	b.n	8000558 <HAL_GPIO_EXTI_Callback+0x3c>
			else{
				duty_cycle += 100;}
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3364      	adds	r3, #100	; 0x64
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000556:	6013      	str	r3, [r2, #0]

			TIM1->CCR1 = duty_cycle;
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_GPIO_EXTI_Callback+0x50>)
 800055a:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GPIO_EXTI_Callback+0x4c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6353      	str	r3, [r2, #52]	; 0x34
	  }
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000000 	.word	0x20000000
 800056c:	40012c00 	.word	0x40012c00

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fbfb 	bl	8000d6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f818 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9a2 	bl	80008c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000580:	f000 f8a6 	bl	80006d0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000584:	f000 f8ee 	bl	8000764 <MX_TIM1_Init>
  MX_FDCAN1_Init();
 8000588:	f000 f85c 	bl	8000644 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	4804      	ldr	r0, [pc, #16]	; (80005a0 <main+0x30>)
 8000590:	f002 f9d2 	bl	8002938 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = duty_cycle;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <main+0x34>)
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <main+0x38>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x2c>
 800059e:	bf00      	nop
 80005a0:	20000120 	.word	0x20000120
 80005a4:	40012c00 	.word	0x40012c00
 80005a8:	20000000 	.word	0x20000000

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0318 	add.w	r3, r7, #24
 80005b6:	2238      	movs	r2, #56	; 0x38
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 faca 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d2:	f001 f8d5 	bl	8001780 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 9;
 80005f0:	2309      	movs	r3, #9
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0318 	add.w	r3, r7, #24
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f96f 	bl	80018e8 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000610:	f000 f9c6 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc73 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000638:	f000 f9b2 	bl	80009a0 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <MX_FDCAN1_Init+0x88>)
 800064c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800064e:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800065a:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000660:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000662:	2200      	movs	r2, #0
 8000664:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000668:	2200      	movs	r2, #0
 800066a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800066e:	2200      	movs	r2, #0
 8000670:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000674:	2204      	movs	r2, #4
 8000676:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800067a:	2201      	movs	r2, #1
 800067c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000680:	2208      	movs	r2, #8
 8000682:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 9;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000686:	2209      	movs	r2, #9
 8000688:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800068c:	2201      	movs	r2, #1
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000692:	2201      	movs	r2, #1
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 8000698:	2201      	movs	r2, #1
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 800069e:	2201      	movs	r2, #1
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_FDCAN1_Init+0x84>)
 80006b6:	f000 fcdb 	bl	8001070 <HAL_FDCAN_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006c0:	f000 f96e 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	40006400 	.word	0x40006400

080006d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_LPUART1_UART_Init+0x90>)
 80006d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 800070e:	2200      	movs	r2, #0
 8000710:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f003 fbf6 	bl	8003f04 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f93f 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000726:	f004 f927 	bl	8004978 <HAL_UARTEx_SetTxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000730:	f000 f936 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000738:	f004 f95c 	bl	80049f4 <HAL_UARTEx_SetRxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000742:	f000 f92d 	bl	80009a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_LPUART1_UART_Init+0x8c>)
 8000748:	f004 f8dd 	bl	8004906 <HAL_UARTEx_DisableFifoMode>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000752:	f000 f925 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000090 	.word	0x20000090
 8000760:	40008000 	.word	0x40008000

08000764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2234      	movs	r2, #52	; 0x34
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 f9d8 	bl	8004b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b45      	ldr	r3, [pc, #276]	; (80008bc <MX_TIM1_Init+0x158>)
 80007a6:	4a46      	ldr	r2, [pc, #280]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 25;
 80007aa:	4b44      	ldr	r3, [pc, #272]	; (80008bc <MX_TIM1_Init+0x158>)
 80007ac:	2219      	movs	r2, #25
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b42      	ldr	r3, [pc, #264]	; (80008bc <MX_TIM1_Init+0x158>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6535;
 80007b6:	4b41      	ldr	r3, [pc, #260]	; (80008bc <MX_TIM1_Init+0x158>)
 80007b8:	f641 1287 	movw	r2, #6535	; 0x1987
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <MX_TIM1_Init+0x158>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b3d      	ldr	r3, [pc, #244]	; (80008bc <MX_TIM1_Init+0x158>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MX_TIM1_Init+0x158>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <MX_TIM1_Init+0x158>)
 80007d2:	f001 fff9 	bl	80027c8 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007dc:	f000 f8e0 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007ea:	4619      	mov	r1, r3
 80007ec:	4833      	ldr	r0, [pc, #204]	; (80008bc <MX_TIM1_Init+0x158>)
 80007ee:	f002 fc43 	bl	8003078 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007f8:	f000 f8d2 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	482f      	ldr	r0, [pc, #188]	; (80008bc <MX_TIM1_Init+0x158>)
 80007fe:	f002 f83a 	bl	8002876 <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000808:	f000 f8ca 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800081c:	4619      	mov	r1, r3
 800081e:	4827      	ldr	r0, [pc, #156]	; (80008bc <MX_TIM1_Init+0x158>)
 8000820:	f003 f9ea 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800082a:	f000 f8b9 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_TIM1_Init+0x158>)
 8000854:	f002 fafc 	bl	8002e50 <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800085e:	f000 f89f 	bl	80009a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	; (80008bc <MX_TIM1_Init+0x158>)
 80008a0:	f003 fa38 	bl	8003d14 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80008aa:	f000 f879 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <MX_TIM1_Init+0x158>)
 80008b0:	f000 f990 	bl	8000bd4 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	; 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000120 	.word	0x20000120
 80008c0:	40012c00 	.word	0x40012c00

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	4b2f      	ldr	r3, [pc, #188]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2e      	ldr	r2, [pc, #184]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f2:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	4a28      	ldr	r2, [pc, #160]	; (8000998 <MX_GPIO_Init+0xd4>)
 80008f8:	f043 0320 	orr.w	r3, r3, #32
 80008fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fe:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	f003 0320 	and.w	r3, r3, #32
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_GPIO_Init+0xd4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	4a22      	ldr	r2, [pc, #136]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_GPIO_Init+0xd4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f000 fed3 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	480f      	ldr	r0, [pc, #60]	; (800099c <MX_GPIO_Init+0xd8>)
 800095e:	f000 fd43 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f000 fd34 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2028      	movs	r0, #40	; 0x28
 8000986:	f000 fb3e 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098a:	2028      	movs	r0, #40	; 0x28
 800098c:	f000 fb55 	bl	800103a <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	; 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	48000800 	.word	0x48000800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6613      	str	r3, [r2, #96]	; 0x60
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6593      	str	r3, [r2, #88]	; 0x58
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009e2:	f000 ff71 	bl	80018c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09e      	sub	sp, #120	; 0x78
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2250      	movs	r2, #80	; 0x50
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 f89d 	bl	8004b54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_FDCAN_MspInit+0xac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d139      	bne.n	8000a98 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a2e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fc8b 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a40:	f7ff ffae 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_FDCAN_MspInit+0xb0>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a78:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a86:	2309      	movs	r3, #9
 8000a88:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fca8 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3778      	adds	r7, #120	; 0x78
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40006400 	.word	0x40006400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09e      	sub	sp, #120	; 0x78
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2250      	movs	r2, #80	; 0x50
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 f843 	bl	8004b54 <memset>
  if(huart->Instance==LPUART1)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <HAL_UART_MspInit+0xa8>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d136      	bne.n	8000b46 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fc33 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000af0:	f7ff ff56 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_UART_MspInit+0xac>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b24:	230c      	movs	r3, #12
 8000b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b34:	230c      	movs	r3, #12
 8000b36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f000 fc51 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b46:	bf00      	nop
 8000b48:	3778      	adds	r7, #120	; 0x78
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40008000 	.word	0x40008000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_TIM_Base_MspInit+0x74>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_TIM_Base_MspInit+0x78>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_TIM_Base_MspInit+0x78>)
 8000b70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b74:	6613      	str	r3, [r2, #96]	; 0x60
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_TIM_Base_MspInit+0x78>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	2018      	movs	r0, #24
 8000b88:	f000 fa3d 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b8c:	2018      	movs	r0, #24
 8000b8e:	f000 fa54 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	2019      	movs	r0, #25
 8000b98:	f000 fa35 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f000 fa4c 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201a      	movs	r0, #26
 8000ba8:	f000 fa2d 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000bac:	201a      	movs	r0, #26
 8000bae:	f000 fa44 	bl	800103a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	201b      	movs	r0, #27
 8000bb8:	f000 fa25 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000bbc:	201b      	movs	r0, #27
 8000bbe:	f000 fa3c 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40012c00 	.word	0x40012c00
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_TIM_MspPostInit+0x64>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d11b      	bne.n	8000c2e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_TIM_MspPostInit+0x68>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_TIM_MspPostInit+0x6c>)
 8000c2a:	f000 fbdd 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3720      	adds	r7, #32
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40012c00 	.word	0x40012c00
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000800 	.word	0x48000800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8c0 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c9e:	f001 ff57 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000120 	.word	0x20000120

08000cac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cb2:	f001 ff4d 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000120 	.word	0x20000120

08000cc0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000cc6:	f001 ff43 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000120 	.word	0x20000120

08000cd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM1_CC_IRQHandler+0x10>)
 8000cda:	f001 ff39 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000120 	.word	0x20000120

08000ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf0:	f000 fd2e 	bl	8001750 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopForever+0x2>)
 8000d1e:	4685      	mov	sp, r0
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x6>)
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopForever+0xa>)
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopForever+0xe>)
 8000d26:	2300      	movs	r3, #0
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:
 8000d2a:	58d4      	ldr	r4, [r2, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:
 8000d30:	18c4      	adds	r4, r0, r3
 8000d32:	428c      	cmp	r4, r1
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopForever+0x12>)
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopForever+0x16>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:
 8000d42:	42a2      	cmp	r2, r4
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>
 8000d46:	f7ff ffd7 	bl	8000cf8 <SystemInit>
 8000d4a:	f003 fedf 	bl	8004b0c <__libc_init_array>
 8000d4e:	f7ff fc0f 	bl	8000570 <main>

08000d52 <LoopForever>:
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
 8000d54:	2001c000 	.word	0x2001c000
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	08004bcc 	.word	0x08004bcc
 8000d64:	20000010 	.word	0x20000010
 8000d68:	20000170 	.word	0x20000170

08000d6c <ADC1_2_IRQHandler>:
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>

08000d6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f939 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f80e 	bl	8000da0 <HAL_InitTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	e001      	b.n	8000d94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d90:	f7ff fe0c 	bl	80009ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d94:	79fb      	ldrb	r3, [r7, #7]

}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_InitTick+0x68>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d022      	beq.n	8000dfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_InitTick+0x6c>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_InitTick+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f944 	bl	8001056 <HAL_SYSTICK_Config>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10f      	bne.n	8000df4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b0f      	cmp	r3, #15
 8000dd8:	d809      	bhi.n	8000dee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	f04f 30ff 	mov.w	r0, #4294967295
 8000de2:	f000 f910 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0x70>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	e007      	b.n	8000dfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	e004      	b.n	8000dfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	e001      	b.n	8000dfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e24:	6013      	str	r3, [r2, #0]
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	2000016c 	.word	0x2000016c
 8000e34:	2000000c 	.word	0x2000000c

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000016c 	.word	0x2000016c

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff40 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa4 	bl	8000fac <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e147      	b.n	8001312 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fcac 	bl	80009f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0210 	bic.w	r2, r2, #16
 80010aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ac:	f7ff fec4 	bl	8000e38 <HAL_GetTick>
 80010b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010b2:	e012      	b.n	80010da <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010b4:	f7ff fec0 	bl	8000e38 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b0a      	cmp	r3, #10
 80010c0:	d90b      	bls.n	80010da <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c6:	f043 0201 	orr.w	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e11b      	b.n	8001312 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d0e5      	beq.n	80010b4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff fe9e 	bl	8000e38 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010fe:	e012      	b.n	8001126 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001100:	f7ff fe9a 	bl	8000e38 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0f5      	b.n	8001312 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0e5      	beq.n	8001100 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0202 	orr.w	r2, r2, #2
 8001142:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a74      	ldr	r2, [pc, #464]	; (800131c <HAL_FDCAN_Init+0x2ac>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d103      	bne.n	8001156 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800114e:	4a74      	ldr	r2, [pc, #464]	; (8001320 <HAL_FDCAN_Init+0x2b0>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7c1b      	ldrb	r3, [r3, #16]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800116c:	619a      	str	r2, [r3, #24]
 800116e:	e007      	b.n	8001180 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800117e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7c5b      	ldrb	r3, [r3, #17]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	e007      	b.n	80011aa <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011a8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7c9b      	ldrb	r3, [r3, #18]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	699a      	ldr	r2, [r3, #24]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	e007      	b.n	80011d4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	699a      	ldr	r2, [r3, #24]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011d2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80011f8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0210 	bic.w	r2, r2, #16
 8001208:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0204 	orr.w	r2, r2, #4
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	e02c      	b.n	800127e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d028      	beq.n	800127e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d01c      	beq.n	800126e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001242:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0210 	orr.w	r2, r2, #16
 8001252:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d110      	bne.n	800127e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	e007      	b.n	800127e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0220 	orr.w	r2, r2, #32
 800127c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	3b01      	subs	r3, #1
 8001284:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	3b01      	subs	r3, #1
 800128c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800128e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001296:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	3b01      	subs	r3, #1
 80012a0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012a8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012b2:	d115      	bne.n	80012e0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012be:	3b01      	subs	r3, #1
 80012c0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	3b01      	subs	r3, #1
 80012ca:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012cc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	3b01      	subs	r3, #1
 80012d6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012dc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012de:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f814 	bl	8001324 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40006400 	.word	0x40006400
 8001320:	40006500 	.word	0x40006500

08001324 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800132e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2b      	ldr	r2, [pc, #172]	; (80013e4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d103      	bne.n	8001342 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001340:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001350:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001376:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	061a      	lsls	r2, r3, #24
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e005      	b.n	80013c4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3304      	adds	r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3f3      	bcc.n	80013b8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	4000a400 	.word	0x4000a400
 80013e4:	40006800 	.word	0x40006800

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013f6:	e15a      	b.n	80016ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2101      	movs	r1, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 814c 	beq.w	80016a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b01      	cmp	r3, #1
 800141a:	d005      	beq.n	8001428 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001424:	2b02      	cmp	r3, #2
 8001426:	d130      	bne.n	800148a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68da      	ldr	r2, [r3, #12]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145e:	2201      	movs	r2, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	f003 0201 	and.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d017      	beq.n	80014c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d123      	bne.n	800151a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691a      	ldr	r2, [r3, #16]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	08da      	lsrs	r2, r3, #3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3208      	adds	r2, #8
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0203 	and.w	r2, r3, #3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80a6 	beq.w	80016a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6613      	str	r3, [r2, #96]	; 0x60
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_GPIO_Init+0x2e4>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001574:	4a56      	ldr	r2, [pc, #344]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3302      	adds	r3, #2
 800157c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	220f      	movs	r2, #15
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800159e:	d01f      	beq.n	80015e0 <HAL_GPIO_Init+0x1f8>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x2ec>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d019      	beq.n	80015dc <HAL_GPIO_Init+0x1f4>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x2f0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d013      	beq.n	80015d8 <HAL_GPIO_Init+0x1f0>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x2f4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d00d      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x2f8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_GPIO_Init+0x2fc>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015c8:	2305      	movs	r3, #5
 80015ca:	e00a      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015cc:	2306      	movs	r3, #6
 80015ce:	e008      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d0:	2304      	movs	r3, #4
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d4:	2303      	movs	r3, #3
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1fa>
 80015e0:	2300      	movs	r3, #0
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f2:	4937      	ldr	r1, [pc, #220]	; (80016d0 <HAL_GPIO_Init+0x2e8>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001624:	4a30      	ldr	r2, [pc, #192]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x300>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164e:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_GPIO_Init+0x300>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x300>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a2:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_GPIO_Init+0x300>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f ae9d 	bne.w	80013f8 <HAL_GPIO_Init+0x10>
  }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48001000 	.word	0x48001000
 80016e4:	48001400 	.word	0x48001400
 80016e8:	40010400 	.word	0x40010400

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	041a      	lsls	r2, r3, #16
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43d9      	mvns	r1, r3
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	400b      	ands	r3, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d006      	beq.n	8001774 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fed4 	bl	800051c <HAL_GPIO_EXTI_Callback>
  }
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d141      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800178e:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800179a:	d131      	bne.n	8001800 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017a2:	4a46      	ldr	r2, [pc, #280]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b4:	4a41      	ldr	r2, [pc, #260]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2232      	movs	r2, #50	; 0x32
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4a3f      	ldr	r2, [pc, #252]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	3301      	adds	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d2:	e002      	b.n	80017da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d102      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f2      	bne.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fa:	d158      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e057      	b.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001810:	e04d      	b.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001818:	d141      	bne.n	800189e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001826:	d131      	bne.n	800188c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800182e:	4a23      	ldr	r2, [pc, #140]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001840:	4a1e      	ldr	r2, [pc, #120]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2232      	movs	r2, #50	; 0x32
 800184e:	fb02 f303 	mul.w	r3, r2, r3
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	0c9b      	lsrs	r3, r3, #18
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185e:	e002      	b.n	8001866 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d102      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f2      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d112      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e011      	b.n	80018b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800189c:	e007      	b.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40007000 	.word	0x40007000
 80018c0:	20000004 	.word	0x20000004
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	6093      	str	r3, [r2, #8]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40007000 	.word	0x40007000

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e306      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d075      	beq.n	80019f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b97      	ldr	r3, [pc, #604]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 030c 	and.w	r3, r3, #12
 800190e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001910:	4b94      	ldr	r3, [pc, #592]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d102      	bne.n	8001926 <HAL_RCC_OscConfig+0x3e>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d002      	beq.n	800192c <HAL_RCC_OscConfig+0x44>
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	2b08      	cmp	r3, #8
 800192a:	d10b      	bne.n	8001944 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4b8d      	ldr	r3, [pc, #564]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d05b      	beq.n	80019f0 <HAL_RCC_OscConfig+0x108>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d157      	bne.n	80019f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e2e1      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x74>
 800194e:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a84      	ldr	r2, [pc, #528]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e01d      	b.n	8001998 <HAL_RCC_OscConfig+0xb0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x98>
 8001966:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a7e      	ldr	r2, [pc, #504]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 800196c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	4b7c      	ldr	r3, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7b      	ldr	r2, [pc, #492]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0xb0>
 8001980:	4b78      	ldr	r3, [pc, #480]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a77      	ldr	r2, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b75      	ldr	r3, [pc, #468]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d013      	beq.n	80019c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fa4a 	bl	8000e38 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff fa46 	bl	8000e38 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e2a6      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	4b6a      	ldr	r3, [pc, #424]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0xc0>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fa36 	bl	8000e38 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fa32 	bl	8000e38 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e292      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019e2:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0xe8>
 80019ee:	e000      	b.n	80019f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d075      	beq.n	8001aea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a08:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0x136>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d002      	beq.n	8001a24 <HAL_RCC_OscConfig+0x13c>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d11f      	bne.n	8001a64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_OscConfig+0x154>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e265      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3c:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	4946      	ldr	r1, [pc, #280]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HAL_RCC_OscConfig+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9a3 	bl	8000da0 <HAL_InitTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d043      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e251      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b3d      	ldr	r3, [pc, #244]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a3c      	ldr	r2, [pc, #240]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f9de 	bl	8000e38 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff f9da 	bl	8000e38 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e23a      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	061b      	lsls	r3, r3, #24
 8001aac:	492d      	ldr	r1, [pc, #180]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e01a      	b.n	8001aea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f9ba 	bl	8000e38 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f9b6 	bl	8000e38 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e216      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1e0>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d041      	beq.n	8001b7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d01c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f993 	bl	8000e38 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b16:	f7ff f98f 	bl	8000e38 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e1ef      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0ef      	beq.n	8001b16 <HAL_RCC_OscConfig+0x22e>
 8001b36:	e020      	b.n	8001b7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3e:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_RCC_OscConfig+0x27c>)
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f976 	bl	8000e38 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4e:	e00d      	b.n	8001b6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff f972 	bl	8000e38 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d906      	bls.n	8001b6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1d2      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ea      	bne.n	8001b50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80a6 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b8c:	4b84      	ldr	r3, [pc, #528]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2b4>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x2b6>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00d      	beq.n	8001bbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bac:	6593      	str	r3, [r2, #88]	; 0x58
 8001bae:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbe:	4b79      	ldr	r3, [pc, #484]	; (8001da4 <HAL_RCC_OscConfig+0x4bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bca:	4b76      	ldr	r3, [pc, #472]	; (8001da4 <HAL_RCC_OscConfig+0x4bc>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a75      	ldr	r2, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x4bc>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f92f 	bl	8000e38 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7ff f92b 	bl	8000e38 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e18b      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <HAL_RCC_OscConfig+0x4bc>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <HAL_RCC_OscConfig+0x32e>
 8001c04:	4b66      	ldr	r3, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a65      	ldr	r2, [pc, #404]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c14:	e024      	b.n	8001c60 <HAL_RCC_OscConfig+0x378>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d110      	bne.n	8001c40 <HAL_RCC_OscConfig+0x358>
 8001c1e:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	4a5e      	ldr	r2, [pc, #376]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c34:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x378>
 8001c40:	4b57      	ldr	r3, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a56      	ldr	r2, [pc, #344]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff f8e6 	bl	8000e38 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8e2 	bl	8000e38 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e140      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ed      	beq.n	8001c70 <HAL_RCC_OscConfig+0x388>
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f8cf 	bl	8000e38 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f8cb 	bl	8000e38 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e129      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ed      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a34      	ldr	r2, [pc, #208]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cee:	4a2c      	ldr	r2, [pc, #176]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f89e 	bl	8000e38 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d00:	f7ff f89a 	bl	8000e38 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e0fa      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x418>
 8001d20:	e01b      	b.n	8001d5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f881 	bl	8000e38 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3a:	f7ff f87d 	bl	8000e38 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0dd      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80d1 	beq.w	8001f06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	f000 808b 	beq.w	8001e88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d15e      	bne.n	8001e38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_RCC_OscConfig+0x4b8>)
 8001d80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff f857 	bl	8000e38 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	e00c      	b.n	8001da8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f853 	bl	8000e38 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d905      	bls.n	8001da8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e0b3      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	4b59      	ldr	r3, [pc, #356]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ec      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db4:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_RCC_OscConfig+0x62c>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6a11      	ldr	r1, [r2, #32]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dc4:	3a01      	subs	r2, #1
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001dce:	0212      	lsls	r2, r2, #8
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd6:	0852      	lsrs	r2, r2, #1
 8001dd8:	3a01      	subs	r2, #1
 8001dda:	0552      	lsls	r2, r2, #21
 8001ddc:	4311      	orrs	r1, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001de2:	0852      	lsrs	r2, r2, #1
 8001de4:	3a01      	subs	r2, #1
 8001de6:	0652      	lsls	r2, r2, #25
 8001de8:	4311      	orrs	r1, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dee:	06d2      	lsls	r2, r2, #27
 8001df0:	430a      	orrs	r2, r1
 8001df2:	4947      	ldr	r1, [pc, #284]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b45      	ldr	r3, [pc, #276]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a44      	ldr	r2, [pc, #272]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f812 	bl	8000e38 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f80e 	bl	8000e38 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e06e      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x530>
 8001e36:	e066      	b.n	8001f06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a34      	ldr	r2, [pc, #208]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a2e      	ldr	r2, [pc, #184]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ffea 	bl	8000e38 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e68:	f7fe ffe6 	bl	8000e38 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e046      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x580>
 8001e86:	e03e      	b.n	8001f06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e039      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <HAL_RCC_OscConfig+0x628>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d12c      	bne.n	8001f02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d123      	bne.n	8001f02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d11b      	bne.n	8001f02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d113      	bne.n	8001f02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	3b01      	subs	r3, #1
 8001efc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	019f800c 	.word	0x019f800c

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e11e      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b91      	ldr	r3, [pc, #580]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 020f 	bic.w	r2, r3, #15
 8001f46:	498c      	ldr	r1, [pc, #560]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b8a      	ldr	r3, [pc, #552]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e106      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d073      	beq.n	8002054 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d129      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0f4      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f84:	f000 f99e 	bl	80022c4 <RCC_GetSysClockFreqFromPLLSource>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_RCC_ClockConfig+0x268>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d93f      	bls.n	8002012 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f92:	4b7a      	ldr	r3, [pc, #488]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d033      	beq.n	8002012 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d12f      	bne.n	8002012 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fb2:	4b72      	ldr	r3, [pc, #456]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e024      	b.n	8002012 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0c6      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe0:	4b66      	ldr	r3, [pc, #408]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0be      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ff0:	f000 f8ce 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a61      	ldr	r2, [pc, #388]	; (8002180 <HAL_RCC_ClockConfig+0x268>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d909      	bls.n	8002012 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002006:	4a5d      	ldr	r2, [pc, #372]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002012:	4b5a      	ldr	r3, [pc, #360]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 0203 	bic.w	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4957      	ldr	r1, [pc, #348]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002024:	f7fe ff08 	bl	8000e38 <HAL_GetTick>
 8002028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	e00a      	b.n	8002042 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202c:	f7fe ff04 	bl	8000e38 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e095      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 020c 	and.w	r2, r3, #12
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d1eb      	bne.n	800202c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d023      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4a42      	ldr	r2, [pc, #264]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002072:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002076:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002084:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800208c:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4936      	ldr	r1, [pc, #216]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
 80020a6:	e008      	b.n	80020ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b80      	cmp	r3, #128	; 0x80
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020ae:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4a32      	ldr	r2, [pc, #200]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 80020b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d21d      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f023 020f 	bic.w	r2, r3, #15
 80020d0:	4929      	ldr	r1, [pc, #164]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d8:	f7fe feae 	bl	8000e38 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe feaa 	bl	8000e38 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e03b      	b.n	800216e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_ClockConfig+0x260>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d1ed      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4917      	ldr	r1, [pc, #92]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490f      	ldr	r1, [pc, #60]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002142:	f000 f825 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_ClockConfig+0x264>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490c      	ldr	r1, [pc, #48]	; (8002184 <HAL_RCC_ClockConfig+0x26c>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x270>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x274>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fe1a 	bl	8000da0 <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	04c4b400 	.word	0x04c4b400
 8002184:	08004b7c 	.word	0x08004b7c
 8002188:	20000004 	.word	0x20000004
 800218c:	20000008 	.word	0x20000008

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d102      	bne.n	80021a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021a2:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	e047      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e03e      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d136      	bne.n	8002234 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	3301      	adds	r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d10c      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021e4:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ee:	68d2      	ldr	r2, [r2, #12]
 80021f0:	0a12      	lsrs	r2, r2, #8
 80021f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021f6:	fb02 f303 	mul.w	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
      break;
 80021fc:	e00c      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	4a10      	ldr	r2, [pc, #64]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002208:	68d2      	ldr	r2, [r2, #12]
 800220a:	0a12      	lsrs	r2, r2, #8
 800220c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002210:	fb02 f303 	mul.w	r3, r2, r3
 8002214:	617b      	str	r3, [r7, #20]
      break;
 8002216:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0e5b      	lsrs	r3, r3, #25
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e001      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002238:	693b      	ldr	r3, [r7, #16]
}
 800223a:	4618      	mov	r0, r3
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	00f42400 	.word	0x00f42400
 8002250:	016e3600 	.word	0x016e3600

08002254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_RCC_GetHCLKFreq+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002270:	f7ff fff0 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4904      	ldr	r1, [pc, #16]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08004b8c 	.word	0x08004b8c

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800229c:	f7ff ffda 	bl	8002254 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0adb      	lsrs	r3, r3, #11
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4904      	ldr	r1, [pc, #16]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08004b8c 	.word	0x08004b8c

080022c4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d10c      	bne.n	8002302 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022e8:	4a17      	ldr	r2, [pc, #92]	; (8002348 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f2:	68d2      	ldr	r2, [r2, #12]
 80022f4:	0a12      	lsrs	r2, r2, #8
 80022f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	617b      	str	r3, [r7, #20]
    break;
 8002300:	e00c      	b.n	800231c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	0a12      	lsrs	r2, r2, #8
 8002310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	617b      	str	r3, [r7, #20]
    break;
 800231a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0e5b      	lsrs	r3, r3, #25
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	3301      	adds	r3, #1
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002336:	687b      	ldr	r3, [r7, #4]
}
 8002338:	4618      	mov	r0, r3
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40021000 	.word	0x40021000
 8002348:	016e3600 	.word	0x016e3600
 800234c:	00f42400 	.word	0x00f42400

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002358:	2300      	movs	r3, #0
 800235a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800235c:	2300      	movs	r3, #0
 800235e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8098 	beq.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b43      	ldr	r3, [pc, #268]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10d      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd47 	bl	8000e38 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ac:	e009      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe fd43 	bl	8000e38 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d902      	bls.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	74fb      	strb	r3, [r7, #19]
        break;
 80023c0:	e005      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0ef      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d159      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01e      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d019      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241c:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fd03 	bl	8000e38 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	e00b      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fcff 	bl	8000e38 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d902      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	74fb      	strb	r3, [r7, #19]
            break;
 800244c:	e006      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ec      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002478:	e008      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
 800247e:	e005      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248c:	7c7b      	ldrb	r3, [r7, #17]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4ba7      	ldr	r3, [pc, #668]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	4aa6      	ldr	r2, [pc, #664]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024aa:	4ba1      	ldr	r3, [pc, #644]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	499d      	ldr	r1, [pc, #628]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024cc:	4b98      	ldr	r3, [pc, #608]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 020c 	bic.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	4995      	ldr	r1, [pc, #596]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ee:	4b90      	ldr	r3, [pc, #576]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	498c      	ldr	r1, [pc, #560]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4984      	ldr	r1, [pc, #528]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002532:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	497b      	ldr	r1, [pc, #492]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	4973      	ldr	r1, [pc, #460]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002576:	4b6e      	ldr	r3, [pc, #440]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	496a      	ldr	r1, [pc, #424]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002598:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4962      	ldr	r1, [pc, #392]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	4959      	ldr	r1, [pc, #356]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025dc:	4b54      	ldr	r3, [pc, #336]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	4951      	ldr	r1, [pc, #324]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	4948      	ldr	r1, [pc, #288]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a43      	ldr	r2, [pc, #268]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	493a      	ldr	r1, [pc, #232]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002654:	d105      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a35      	ldr	r2, [pc, #212]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002660:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d015      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	492c      	ldr	r1, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d105      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002698:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a6:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b4:	491e      	ldr	r1, [pc, #120]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d105      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d015      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ec:	4910      	ldr	r1, [pc, #64]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026fc:	d105      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002708:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4902      	ldr	r1, [pc, #8]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	e001      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002730:	40021000 	.word	0x40021000
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4918      	ldr	r1, [pc, #96]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d105      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800278e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002792:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800279a:	490a      	ldr	r1, [pc, #40]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80027b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e049      	b.n	800286e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe f9b2 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3304      	adds	r3, #4
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	f000 fd6c 	bl	80032e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e049      	b.n	800291c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d106      	bne.n	80028a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f841 	bl	8002924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 fd15 	bl	80032e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <HAL_TIM_PWM_Start+0x24>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e03c      	b.n	80029d6 <HAL_TIM_PWM_Start+0x9e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d109      	bne.n	8002976 <HAL_TIM_PWM_Start+0x3e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e02f      	b.n	80029d6 <HAL_TIM_PWM_Start+0x9e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d109      	bne.n	8002990 <HAL_TIM_PWM_Start+0x58>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	e022      	b.n	80029d6 <HAL_TIM_PWM_Start+0x9e>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d109      	bne.n	80029aa <HAL_TIM_PWM_Start+0x72>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	e015      	b.n	80029d6 <HAL_TIM_PWM_Start+0x9e>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d109      	bne.n	80029c4 <HAL_TIM_PWM_Start+0x8c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	bf14      	ite	ne
 80029bc:	2301      	movne	r3, #1
 80029be:	2300      	moveq	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	e008      	b.n	80029d6 <HAL_TIM_PWM_Start+0x9e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e0a1      	b.n	8002b22 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_PWM_Start+0xb6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ec:	e023      	b.n	8002a36 <HAL_TIM_PWM_Start+0xfe>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d104      	bne.n	80029fe <HAL_TIM_PWM_Start+0xc6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029fc:	e01b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xfe>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d104      	bne.n	8002a0e <HAL_TIM_PWM_Start+0xd6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a0c:	e013      	b.n	8002a36 <HAL_TIM_PWM_Start+0xfe>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0xe6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a1c:	e00b      	b.n	8002a36 <HAL_TIM_PWM_Start+0xfe>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xf6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a2c:	e003      	b.n	8002a36 <HAL_TIM_PWM_Start+0xfe>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6839      	ldr	r1, [r7, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f8b4 	bl	8003bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <HAL_TIM_PWM_Start+0x1f4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x148>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <HAL_TIM_PWM_Start+0x1f8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x148>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <HAL_TIM_PWM_Start+0x1fc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x148>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <HAL_TIM_PWM_Start+0x200>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x148>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <HAL_TIM_PWM_Start+0x204>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x148>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <HAL_TIM_PWM_Start+0x208>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_TIM_PWM_Start+0x14c>
 8002a80:	2301      	movs	r3, #1
 8002a82:	e000      	b.n	8002a86 <HAL_TIM_PWM_Start+0x14e>
 8002a84:	2300      	movs	r3, #0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_TIM_PWM_Start+0x1f4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d018      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_TIM_PWM_Start+0x20c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_TIM_PWM_Start+0x210>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_TIM_PWM_Start+0x1f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a18      	ldr	r2, [pc, #96]	; (8002b34 <HAL_TIM_PWM_Start+0x1fc>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_PWM_Start+0x1a8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <HAL_TIM_PWM_Start+0x208>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d115      	bne.n	8002b0c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_TIM_PWM_Start+0x214>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d015      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x1e6>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af8:	d011      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	e008      	b.n	8002b1e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e000      	b.n	8002b20 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40013400 	.word	0x40013400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40014400 	.word	0x40014400
 8002b3c:	40014800 	.word	0x40014800
 8002b40:	40015000 	.word	0x40015000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	00010007 	.word	0x00010007

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0202 	mvn.w	r2, #2
 8002b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb88 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fb7a 	bl	8003294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb8b 	bl	80032bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fb5e 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fb50 	bl	8003294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb61 	bl	80032bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d122      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d11b      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0208 	mvn.w	r2, #8
 8002c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb34 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002c40:	e005      	b.n	8002c4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fb26 	bl	8003294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fb37 	bl	80032bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b10      	cmp	r3, #16
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0210 	mvn.w	r2, #16
 8002c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fb0a 	bl	80032a8 <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fafc 	bl	8003294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fb0d 	bl	80032bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0201 	mvn.w	r2, #1
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fad6 	bl	8003280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b80      	cmp	r3, #128	; 0x80
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	2b80      	cmp	r3, #128	; 0x80
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f001 f8c6 	bl	8003e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0e:	d10e      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	2b80      	cmp	r3, #128	; 0x80
 8002d1c:	d107      	bne.n	8002d2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 f8b9 	bl	8003ea0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d38:	2b40      	cmp	r3, #64	; 0x40
 8002d3a:	d10e      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b40      	cmp	r3, #64	; 0x40
 8002d48:	d107      	bne.n	8002d5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fabb 	bl	80032d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d10e      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f06f 0220 	mvn.w	r2, #32
 8002d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f001 f879 	bl	8003e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d10f      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da4:	d107      	bne.n	8002db6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f001 f87f 	bl	8003eb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc4:	d10f      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f001 f871 	bl	8003ec8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df4:	d10f      	bne.n	8002e16 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e04:	d107      	bne.n	8002e16 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f001 f863 	bl	8003edc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e24:	d10f      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f001 f855 	bl	8003ef0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0ff      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b14      	cmp	r3, #20
 8002e7a:	f200 80f0 	bhi.w	800305e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002ed9 	.word	0x08002ed9
 8002e88:	0800305f 	.word	0x0800305f
 8002e8c:	0800305f 	.word	0x0800305f
 8002e90:	0800305f 	.word	0x0800305f
 8002e94:	08002f19 	.word	0x08002f19
 8002e98:	0800305f 	.word	0x0800305f
 8002e9c:	0800305f 	.word	0x0800305f
 8002ea0:	0800305f 	.word	0x0800305f
 8002ea4:	08002f5b 	.word	0x08002f5b
 8002ea8:	0800305f 	.word	0x0800305f
 8002eac:	0800305f 	.word	0x0800305f
 8002eb0:	0800305f 	.word	0x0800305f
 8002eb4:	08002f9b 	.word	0x08002f9b
 8002eb8:	0800305f 	.word	0x0800305f
 8002ebc:	0800305f 	.word	0x0800305f
 8002ec0:	0800305f 	.word	0x0800305f
 8002ec4:	08002fdd 	.word	0x08002fdd
 8002ec8:	0800305f 	.word	0x0800305f
 8002ecc:	0800305f 	.word	0x0800305f
 8002ed0:	0800305f 	.word	0x0800305f
 8002ed4:	0800301d 	.word	0x0800301d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fa9e 	bl	8003420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0208 	orr.w	r2, r2, #8
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691a      	ldr	r2, [r3, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	619a      	str	r2, [r3, #24]
      break;
 8002f16:	e0a5      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fb18 	bl	8003554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6999      	ldr	r1, [r3, #24]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	021a      	lsls	r2, r3, #8
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]
      break;
 8002f58:	e084      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fb8b 	bl	800367c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0208 	orr.w	r2, r2, #8
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0204 	bic.w	r2, r2, #4
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]
      break;
 8002f98:	e064      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fbfd 	bl	80037a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	021a      	lsls	r2, r3, #8
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	61da      	str	r2, [r3, #28]
      break;
 8002fda:	e043      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fc70 	bl	80038c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0204 	bic.w	r2, r2, #4
 8003006:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800301a:	e023      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fcba 	bl	800399c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003036:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	021a      	lsls	r2, r3, #8
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800305c:	e002      	b.n	8003064 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	75fb      	strb	r3, [r7, #23]
      break;
 8003062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop

08003078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_TIM_ConfigClockSource+0x1c>
 8003090:	2302      	movs	r3, #2
 8003092:	e0e6      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x1ea>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80030b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_TIM_ConfigClockSource+0x1f4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f000 80b1 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 80030d4:	4a65      	ldr	r2, [pc, #404]	; (800326c <HAL_TIM_ConfigClockSource+0x1f4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	f200 80b6 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 80030dc:	4a64      	ldr	r2, [pc, #400]	; (8003270 <HAL_TIM_ConfigClockSource+0x1f8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	f000 80a9 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 80030e4:	4a62      	ldr	r2, [pc, #392]	; (8003270 <HAL_TIM_ConfigClockSource+0x1f8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	f200 80ae 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 80030ec:	4a61      	ldr	r2, [pc, #388]	; (8003274 <HAL_TIM_ConfigClockSource+0x1fc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f000 80a1 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 80030f4:	4a5f      	ldr	r2, [pc, #380]	; (8003274 <HAL_TIM_ConfigClockSource+0x1fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f200 80a6 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 80030fc:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_TIM_ConfigClockSource+0x200>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f000 8099 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_TIM_ConfigClockSource+0x200>)
 8003106:	4293      	cmp	r3, r2
 8003108:	f200 809e 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 800310c:	4a5b      	ldr	r2, [pc, #364]	; (800327c <HAL_TIM_ConfigClockSource+0x204>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f000 8091 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 8003114:	4a59      	ldr	r2, [pc, #356]	; (800327c <HAL_TIM_ConfigClockSource+0x204>)
 8003116:	4293      	cmp	r3, r2
 8003118:	f200 8096 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 800311c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003120:	f000 8089 	beq.w	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 8003124:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003128:	f200 808e 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003130:	d03e      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0x138>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	f200 8087 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	f000 8086 	beq.w	800324e <HAL_TIM_ConfigClockSource+0x1d6>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003146:	d87f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003148:	2b70      	cmp	r3, #112	; 0x70
 800314a:	d01a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x10a>
 800314c:	2b70      	cmp	r3, #112	; 0x70
 800314e:	d87b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003150:	2b60      	cmp	r3, #96	; 0x60
 8003152:	d050      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x17e>
 8003154:	2b60      	cmp	r3, #96	; 0x60
 8003156:	d877      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003158:	2b50      	cmp	r3, #80	; 0x50
 800315a:	d03c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15e>
 800315c:	2b50      	cmp	r3, #80	; 0x50
 800315e:	d873      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d058      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x19e>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d86f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003168:	2b30      	cmp	r3, #48	; 0x30
 800316a:	d064      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d86b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d060      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d867      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d05a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x1be>
 8003180:	e062      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f000 fceb 	bl	8003b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
      break;
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f000 fcd4 	bl	8003b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e03c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 fc46 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2150      	movs	r1, #80	; 0x50
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fc9f 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e02c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	461a      	mov	r2, r3
 8003204:	f000 fc65 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2160      	movs	r1, #96	; 0x60
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fc8f 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003214:	e01c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	461a      	mov	r2, r3
 8003224:	f000 fc26 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fc7f 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 fc76 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003246:	e003      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800324e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	00100070 	.word	0x00100070
 8003270:	00100050 	.word	0x00100050
 8003274:	00100040 	.word	0x00100040
 8003278:	00100030 	.word	0x00100030
 800327c:	00100020 	.word	0x00100020

08003280 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a42      	ldr	r2, [pc, #264]	; (8003400 <TIM_Base_SetConfig+0x11c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <TIM_Base_SetConfig+0x40>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d00f      	beq.n	8003324 <TIM_Base_SetConfig+0x40>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3f      	ldr	r2, [pc, #252]	; (8003404 <TIM_Base_SetConfig+0x120>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00b      	beq.n	8003324 <TIM_Base_SetConfig+0x40>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3e      	ldr	r2, [pc, #248]	; (8003408 <TIM_Base_SetConfig+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d007      	beq.n	8003324 <TIM_Base_SetConfig+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3d      	ldr	r2, [pc, #244]	; (800340c <TIM_Base_SetConfig+0x128>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3c      	ldr	r2, [pc, #240]	; (8003410 <TIM_Base_SetConfig+0x12c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d108      	bne.n	8003336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a31      	ldr	r2, [pc, #196]	; (8003400 <TIM_Base_SetConfig+0x11c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003344:	d01b      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <TIM_Base_SetConfig+0x120>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d017      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <TIM_Base_SetConfig+0x124>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a2c      	ldr	r2, [pc, #176]	; (800340c <TIM_Base_SetConfig+0x128>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00f      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <TIM_Base_SetConfig+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a2b      	ldr	r2, [pc, #172]	; (8003418 <TIM_Base_SetConfig+0x134>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <TIM_Base_SetConfig+0x138>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_Base_SetConfig+0x9a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a25      	ldr	r2, [pc, #148]	; (8003410 <TIM_Base_SetConfig+0x12c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <TIM_Base_SetConfig+0x11c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d013      	beq.n	80033e4 <TIM_Base_SetConfig+0x100>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a13      	ldr	r2, [pc, #76]	; (800340c <TIM_Base_SetConfig+0x128>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00f      	beq.n	80033e4 <TIM_Base_SetConfig+0x100>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a13      	ldr	r2, [pc, #76]	; (8003414 <TIM_Base_SetConfig+0x130>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <TIM_Base_SetConfig+0x100>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <TIM_Base_SetConfig+0x134>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <TIM_Base_SetConfig+0x100>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a11      	ldr	r2, [pc, #68]	; (800341c <TIM_Base_SetConfig+0x138>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_Base_SetConfig+0x100>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <TIM_Base_SetConfig+0x12c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d103      	bne.n	80033ec <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	615a      	str	r2, [r3, #20]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40013400 	.word	0x40013400
 8003410:	40015000 	.word	0x40015000
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0303 	bic.w	r3, r3, #3
 800345a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f023 0302 	bic.w	r3, r3, #2
 800346c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <TIM_OC1_SetConfig+0x11c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <TIM_OC1_SetConfig+0x88>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <TIM_OC1_SetConfig+0x120>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00f      	beq.n	80034a8 <TIM_OC1_SetConfig+0x88>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a2e      	ldr	r2, [pc, #184]	; (8003544 <TIM_OC1_SetConfig+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_OC1_SetConfig+0x88>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <TIM_OC1_SetConfig+0x128>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_OC1_SetConfig+0x88>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a2c      	ldr	r2, [pc, #176]	; (800354c <TIM_OC1_SetConfig+0x12c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_OC1_SetConfig+0x88>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <TIM_OC1_SetConfig+0x130>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d10c      	bne.n	80034c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f023 0308 	bic.w	r3, r3, #8
 80034ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 0304 	bic.w	r3, r3, #4
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <TIM_OC1_SetConfig+0x11c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_OC1_SetConfig+0xd2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1c      	ldr	r2, [pc, #112]	; (8003540 <TIM_OC1_SetConfig+0x120>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_OC1_SetConfig+0xd2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <TIM_OC1_SetConfig+0x124>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_OC1_SetConfig+0xd2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <TIM_OC1_SetConfig+0x128>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_OC1_SetConfig+0xd2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a19      	ldr	r2, [pc, #100]	; (800354c <TIM_OC1_SetConfig+0x12c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC1_SetConfig+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <TIM_OC1_SetConfig+0x130>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40013400 	.word	0x40013400
 8003544:	40014000 	.word	0x40014000
 8003548:	40014400 	.word	0x40014400
 800354c:	40014800 	.word	0x40014800
 8003550:	40015000 	.word	0x40015000

08003554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0210 	bic.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0320 	bic.w	r3, r3, #32
 80035a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	; (8003664 <TIM_OC2_SetConfig+0x110>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_OC2_SetConfig+0x74>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2b      	ldr	r2, [pc, #172]	; (8003668 <TIM_OC2_SetConfig+0x114>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_OC2_SetConfig+0x74>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2a      	ldr	r2, [pc, #168]	; (800366c <TIM_OC2_SetConfig+0x118>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d10d      	bne.n	80035e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <TIM_OC2_SetConfig+0x110>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <TIM_OC2_SetConfig+0xc0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <TIM_OC2_SetConfig+0x114>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00f      	beq.n	8003614 <TIM_OC2_SetConfig+0xc0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <TIM_OC2_SetConfig+0x11c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00b      	beq.n	8003614 <TIM_OC2_SetConfig+0xc0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <TIM_OC2_SetConfig+0x120>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_OC2_SetConfig+0xc0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <TIM_OC2_SetConfig+0x124>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC2_SetConfig+0xc0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a17      	ldr	r2, [pc, #92]	; (800366c <TIM_OC2_SetConfig+0x118>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d113      	bne.n	800363c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800361a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	621a      	str	r2, [r3, #32]
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40015000 	.word	0x40015000
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0303 	bic.w	r3, r3, #3
 80036b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <TIM_OC3_SetConfig+0x10c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <TIM_OC3_SetConfig+0x72>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <TIM_OC3_SetConfig+0x110>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_OC3_SetConfig+0x72>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_OC3_SetConfig+0x114>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10d      	bne.n	800370a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <TIM_OC3_SetConfig+0x10c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <TIM_OC3_SetConfig+0xbe>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1d      	ldr	r2, [pc, #116]	; (800378c <TIM_OC3_SetConfig+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00f      	beq.n	800373a <TIM_OC3_SetConfig+0xbe>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <TIM_OC3_SetConfig+0x118>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00b      	beq.n	800373a <TIM_OC3_SetConfig+0xbe>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <TIM_OC3_SetConfig+0x11c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <TIM_OC3_SetConfig+0xbe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1b      	ldr	r2, [pc, #108]	; (800379c <TIM_OC3_SetConfig+0x120>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d003      	beq.n	800373a <TIM_OC3_SetConfig+0xbe>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <TIM_OC3_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d113      	bne.n	8003762 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
}
 800377c:	bf00      	nop
 800377e:	371c      	adds	r7, #28
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00
 800378c:	40013400 	.word	0x40013400
 8003790:	40015000 	.word	0x40015000
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800

080037a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2c      	ldr	r2, [pc, #176]	; (80038b0 <TIM_OC4_SetConfig+0x110>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d007      	beq.n	8003814 <TIM_OC4_SetConfig+0x74>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_OC4_SetConfig+0x114>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_OC4_SetConfig+0x74>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <TIM_OC4_SetConfig+0x118>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d10d      	bne.n	8003830 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800381a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <TIM_OC4_SetConfig+0x110>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d013      	beq.n	8003860 <TIM_OC4_SetConfig+0xc0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a1e      	ldr	r2, [pc, #120]	; (80038b4 <TIM_OC4_SetConfig+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00f      	beq.n	8003860 <TIM_OC4_SetConfig+0xc0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <TIM_OC4_SetConfig+0x11c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_OC4_SetConfig+0xc0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <TIM_OC4_SetConfig+0x120>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_OC4_SetConfig+0xc0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1c      	ldr	r2, [pc, #112]	; (80038c4 <TIM_OC4_SetConfig+0x124>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_OC4_SetConfig+0xc0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <TIM_OC4_SetConfig+0x118>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d113      	bne.n	8003888 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003866:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800386e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40015000 	.word	0x40015000
 80038bc:	40014000 	.word	0x40014000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800

080038c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800390c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	041b      	lsls	r3, r3, #16
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <TIM_OC5_SetConfig+0xbc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_OC5_SetConfig+0x82>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <TIM_OC5_SetConfig+0xc0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_OC5_SetConfig+0x82>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a17      	ldr	r2, [pc, #92]	; (800398c <TIM_OC5_SetConfig+0xc4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_OC5_SetConfig+0x82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a16      	ldr	r2, [pc, #88]	; (8003990 <TIM_OC5_SetConfig+0xc8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_OC5_SetConfig+0x82>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <TIM_OC5_SetConfig+0xcc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_OC5_SetConfig+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <TIM_OC5_SetConfig+0xd0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d109      	bne.n	800395e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40013400 	.word	0x40013400
 800398c:	40014000 	.word	0x40014000
 8003990:	40014400 	.word	0x40014400
 8003994:	40014800 	.word	0x40014800
 8003998:	40015000 	.word	0x40015000

0800399c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	051b      	lsls	r3, r3, #20
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1a      	ldr	r2, [pc, #104]	; (8003a5c <TIM_OC6_SetConfig+0xc0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <TIM_OC6_SetConfig+0x84>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <TIM_OC6_SetConfig+0xc4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00f      	beq.n	8003a20 <TIM_OC6_SetConfig+0x84>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <TIM_OC6_SetConfig+0xc8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_OC6_SetConfig+0x84>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <TIM_OC6_SetConfig+0xcc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_OC6_SetConfig+0x84>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <TIM_OC6_SetConfig+0xd0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC6_SetConfig+0x84>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a15      	ldr	r2, [pc, #84]	; (8003a70 <TIM_OC6_SetConfig+0xd4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40014000 	.word	0x40014000
 8003a68:	40014400 	.word	0x40014400
 8003a6c:	40014800 	.word	0x40014800
 8003a70:	40015000 	.word	0x40015000

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0307 	orr.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1a      	ldr	r2, [r3, #32]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	621a      	str	r2, [r3, #32]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e06f      	b.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a2e      	ldr	r2, [pc, #184]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d018      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1a      	ldr	r2, [pc, #104]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10c      	bne.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40015000 	.word	0x40015000
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40014000 	.word	0x40014000

08003d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e096      	b.n	8003e5e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d009      	beq.n	8003dc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d004      	beq.n	8003dc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d106      	bne.n	8003dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a24      	ldr	r2, [pc, #144]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d12b      	bne.n	8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	051b      	lsls	r3, r3, #20
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a10      	ldr	r2, [pc, #64]	; (8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d106      	bne.n	8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40015000 	.word	0x40015000

08003e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e042      	b.n	8003f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d106      	bne.n	8003f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fc fdbd 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2224      	movs	r2, #36	; 0x24
 8003f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0201 	bic.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f82c 	bl	8003fa4 <UART_SetConfig>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e022      	b.n	8003f9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb1c 	bl	800459c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fba3 	bl	80046e0 <UART_CheckIdleState>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b08c      	sub	sp, #48	; 0x30
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4baa      	ldr	r3, [pc, #680]	; (800427c <UART_SetConfig+0x2d8>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a9f      	ldr	r2, [pc, #636]	; (8004280 <UART_SetConfig+0x2dc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400c:	4313      	orrs	r3, r2
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800401a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004024:	430b      	orrs	r3, r1
 8004026:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f023 010f 	bic.w	r1, r3, #15
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a90      	ldr	r2, [pc, #576]	; (8004284 <UART_SetConfig+0x2e0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d125      	bne.n	8004094 <UART_SetConfig+0xf0>
 8004048:	4b8f      	ldr	r3, [pc, #572]	; (8004288 <UART_SetConfig+0x2e4>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d81a      	bhi.n	800408c <UART_SetConfig+0xe8>
 8004056:	a201      	add	r2, pc, #4	; (adr r2, 800405c <UART_SetConfig+0xb8>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	0800406d 	.word	0x0800406d
 8004060:	0800407d 	.word	0x0800407d
 8004064:	08004075 	.word	0x08004075
 8004068:	08004085 	.word	0x08004085
 800406c:	2301      	movs	r3, #1
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e116      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004074:	2302      	movs	r3, #2
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407a:	e112      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800407c:	2304      	movs	r3, #4
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004082:	e10e      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004084:	2308      	movs	r3, #8
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408a:	e10a      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800408c:	2310      	movs	r3, #16
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004092:	e106      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a7c      	ldr	r2, [pc, #496]	; (800428c <UART_SetConfig+0x2e8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d138      	bne.n	8004110 <UART_SetConfig+0x16c>
 800409e:	4b7a      	ldr	r3, [pc, #488]	; (8004288 <UART_SetConfig+0x2e4>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d82d      	bhi.n	8004108 <UART_SetConfig+0x164>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0x110>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040e9 	.word	0x080040e9
 80040b8:	08004109 	.word	0x08004109
 80040bc:	08004109 	.word	0x08004109
 80040c0:	08004109 	.word	0x08004109
 80040c4:	080040f9 	.word	0x080040f9
 80040c8:	08004109 	.word	0x08004109
 80040cc:	08004109 	.word	0x08004109
 80040d0:	08004109 	.word	0x08004109
 80040d4:	080040f1 	.word	0x080040f1
 80040d8:	08004109 	.word	0x08004109
 80040dc:	08004109 	.word	0x08004109
 80040e0:	08004109 	.word	0x08004109
 80040e4:	08004101 	.word	0x08004101
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ee:	e0d8      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80040f0:	2302      	movs	r3, #2
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f6:	e0d4      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80040f8:	2304      	movs	r3, #4
 80040fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fe:	e0d0      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004100:	2308      	movs	r3, #8
 8004102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004106:	e0cc      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004108:	2310      	movs	r3, #16
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800410e:	e0c8      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a5e      	ldr	r2, [pc, #376]	; (8004290 <UART_SetConfig+0x2ec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d125      	bne.n	8004166 <UART_SetConfig+0x1c2>
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <UART_SetConfig+0x2e4>)
 800411c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004120:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004124:	2b30      	cmp	r3, #48	; 0x30
 8004126:	d016      	beq.n	8004156 <UART_SetConfig+0x1b2>
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d818      	bhi.n	800415e <UART_SetConfig+0x1ba>
 800412c:	2b20      	cmp	r3, #32
 800412e:	d00a      	beq.n	8004146 <UART_SetConfig+0x1a2>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d814      	bhi.n	800415e <UART_SetConfig+0x1ba>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <UART_SetConfig+0x19a>
 8004138:	2b10      	cmp	r3, #16
 800413a:	d008      	beq.n	800414e <UART_SetConfig+0x1aa>
 800413c:	e00f      	b.n	800415e <UART_SetConfig+0x1ba>
 800413e:	2300      	movs	r3, #0
 8004140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004144:	e0ad      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004146:	2302      	movs	r3, #2
 8004148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414c:	e0a9      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800414e:	2304      	movs	r3, #4
 8004150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004154:	e0a5      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004156:	2308      	movs	r3, #8
 8004158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800415c:	e0a1      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800415e:	2310      	movs	r3, #16
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004164:	e09d      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a4a      	ldr	r2, [pc, #296]	; (8004294 <UART_SetConfig+0x2f0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d125      	bne.n	80041bc <UART_SetConfig+0x218>
 8004170:	4b45      	ldr	r3, [pc, #276]	; (8004288 <UART_SetConfig+0x2e4>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800417a:	2bc0      	cmp	r3, #192	; 0xc0
 800417c:	d016      	beq.n	80041ac <UART_SetConfig+0x208>
 800417e:	2bc0      	cmp	r3, #192	; 0xc0
 8004180:	d818      	bhi.n	80041b4 <UART_SetConfig+0x210>
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d00a      	beq.n	800419c <UART_SetConfig+0x1f8>
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d814      	bhi.n	80041b4 <UART_SetConfig+0x210>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <UART_SetConfig+0x1f0>
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d008      	beq.n	80041a4 <UART_SetConfig+0x200>
 8004192:	e00f      	b.n	80041b4 <UART_SetConfig+0x210>
 8004194:	2300      	movs	r3, #0
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e082      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800419c:	2302      	movs	r3, #2
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e07e      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e07a      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80041ac:	2308      	movs	r3, #8
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e076      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ba:	e072      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a35      	ldr	r2, [pc, #212]	; (8004298 <UART_SetConfig+0x2f4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d12a      	bne.n	800421c <UART_SetConfig+0x278>
 80041c6:	4b30      	ldr	r3, [pc, #192]	; (8004288 <UART_SetConfig+0x2e4>)
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041d4:	d01a      	beq.n	800420c <UART_SetConfig+0x268>
 80041d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041da:	d81b      	bhi.n	8004214 <UART_SetConfig+0x270>
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e0:	d00c      	beq.n	80041fc <UART_SetConfig+0x258>
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d815      	bhi.n	8004214 <UART_SetConfig+0x270>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <UART_SetConfig+0x250>
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f0:	d008      	beq.n	8004204 <UART_SetConfig+0x260>
 80041f2:	e00f      	b.n	8004214 <UART_SetConfig+0x270>
 80041f4:	2300      	movs	r3, #0
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fa:	e052      	b.n	80042a2 <UART_SetConfig+0x2fe>
 80041fc:	2302      	movs	r3, #2
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004202:	e04e      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004204:	2304      	movs	r3, #4
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420a:	e04a      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800420c:	2308      	movs	r3, #8
 800420e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004212:	e046      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004214:	2310      	movs	r3, #16
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421a:	e042      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a17      	ldr	r2, [pc, #92]	; (8004280 <UART_SetConfig+0x2dc>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d13a      	bne.n	800429c <UART_SetConfig+0x2f8>
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <UART_SetConfig+0x2e4>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004230:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004234:	d01a      	beq.n	800426c <UART_SetConfig+0x2c8>
 8004236:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800423a:	d81b      	bhi.n	8004274 <UART_SetConfig+0x2d0>
 800423c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004240:	d00c      	beq.n	800425c <UART_SetConfig+0x2b8>
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d815      	bhi.n	8004274 <UART_SetConfig+0x2d0>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <UART_SetConfig+0x2b0>
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d008      	beq.n	8004264 <UART_SetConfig+0x2c0>
 8004252:	e00f      	b.n	8004274 <UART_SetConfig+0x2d0>
 8004254:	2300      	movs	r3, #0
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425a:	e022      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800425c:	2302      	movs	r3, #2
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004262:	e01e      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004264:	2304      	movs	r3, #4
 8004266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426a:	e01a      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800426c:	2308      	movs	r3, #8
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004272:	e016      	b.n	80042a2 <UART_SetConfig+0x2fe>
 8004274:	2310      	movs	r3, #16
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e012      	b.n	80042a2 <UART_SetConfig+0x2fe>
 800427c:	cfff69f3 	.word	0xcfff69f3
 8004280:	40008000 	.word	0x40008000
 8004284:	40013800 	.word	0x40013800
 8004288:	40021000 	.word	0x40021000
 800428c:	40004400 	.word	0x40004400
 8004290:	40004800 	.word	0x40004800
 8004294:	40004c00 	.word	0x40004c00
 8004298:	40005000 	.word	0x40005000
 800429c:	2310      	movs	r3, #16
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4aae      	ldr	r2, [pc, #696]	; (8004560 <UART_SetConfig+0x5bc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	f040 8097 	bne.w	80043dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d823      	bhi.n	80042fe <UART_SetConfig+0x35a>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x318>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ef 	.word	0x080042ef
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042ff 	.word	0x080042ff
 80042d8:	080042ff 	.word	0x080042ff
 80042dc:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fd ffc4 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b9e      	ldr	r3, [pc, #632]	; (8004564 <UART_SetConfig+0x5c0>)
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042ec:	e00d      	b.n	800430a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fd ff4f 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042f4:	e009      	b.n	800430a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8130 	beq.w	8004572 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	4a94      	ldr	r2, [pc, #592]	; (8004568 <UART_SetConfig+0x5c4>)
 8004318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431c:	461a      	mov	r2, r3
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	fbb3 f3f2 	udiv	r3, r3, r2
 8004324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	429a      	cmp	r2, r3
 8004334:	d305      	bcc.n	8004342 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d903      	bls.n	800434a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004348:	e113      	b.n	8004572 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2200      	movs	r2, #0
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	60fa      	str	r2, [r7, #12]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	4a84      	ldr	r2, [pc, #528]	; (8004568 <UART_SetConfig+0x5c4>)
 8004358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800435c:	b29b      	uxth	r3, r3
 800435e:	2200      	movs	r2, #0
 8004360:	603b      	str	r3, [r7, #0]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004368:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800436c:	f7fb ff54 	bl	8000218 <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	020b      	lsls	r3, r1, #8
 8004382:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004386:	0202      	lsls	r2, r0, #8
 8004388:	6979      	ldr	r1, [r7, #20]
 800438a:	6849      	ldr	r1, [r1, #4]
 800438c:	0849      	lsrs	r1, r1, #1
 800438e:	2000      	movs	r0, #0
 8004390:	460c      	mov	r4, r1
 8004392:	4605      	mov	r5, r0
 8004394:	eb12 0804 	adds.w	r8, r2, r4
 8004398:	eb43 0905 	adc.w	r9, r3, r5
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	469a      	mov	sl, r3
 80043a4:	4693      	mov	fp, r2
 80043a6:	4652      	mov	r2, sl
 80043a8:	465b      	mov	r3, fp
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fb ff33 	bl	8000218 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4613      	mov	r3, r2
 80043b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c0:	d308      	bcc.n	80043d4 <UART_SetConfig+0x430>
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c8:	d204      	bcs.n	80043d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a3a      	ldr	r2, [r7, #32]
 80043d0:	60da      	str	r2, [r3, #12]
 80043d2:	e0ce      	b.n	8004572 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043da:	e0ca      	b.n	8004572 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e4:	d166      	bne.n	80044b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d827      	bhi.n	800443e <UART_SetConfig+0x49a>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x450>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	0800443f 	.word	0x0800443f
 8004404:	0800442f 	.word	0x0800442f
 8004408:	0800443f 	.word	0x0800443f
 800440c:	0800443f 	.word	0x0800443f
 8004410:	0800443f 	.word	0x0800443f
 8004414:	08004437 	.word	0x08004437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7fd ff28 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 800441c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800441e:	e014      	b.n	800444a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fd ff3a 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8004424:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004426:	e010      	b.n	800444a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004428:	4b4e      	ldr	r3, [pc, #312]	; (8004564 <UART_SetConfig+0x5c0>)
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800442c:	e00d      	b.n	800444a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442e:	f7fd feaf 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8004432:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004434:	e009      	b.n	800444a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800443c:	e005      	b.n	800444a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004448:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8090 	beq.w	8004572 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	4a44      	ldr	r2, [pc, #272]	; (8004568 <UART_SetConfig+0x5c4>)
 8004458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800445c:	461a      	mov	r2, r3
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	fbb3 f3f2 	udiv	r3, r3, r2
 8004464:	005a      	lsls	r2, r3, #1
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	441a      	add	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d916      	bls.n	80044ac <UART_SetConfig+0x508>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d212      	bcs.n	80044ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f023 030f 	bic.w	r3, r3, #15
 800448e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	b29b      	uxth	r3, r3
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	b29a      	uxth	r2, r3
 800449c:	8bfb      	ldrh	r3, [r7, #30]
 800449e:	4313      	orrs	r3, r2
 80044a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	8bfa      	ldrh	r2, [r7, #30]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	e062      	b.n	8004572 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044b2:	e05e      	b.n	8004572 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d828      	bhi.n	800450e <UART_SetConfig+0x56a>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x520>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044f1 	.word	0x080044f1
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044ff 	.word	0x080044ff
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	0800450f 	.word	0x0800450f
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7fd fec0 	bl	800226c <HAL_RCC_GetPCLK1Freq>
 80044ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ee:	e014      	b.n	800451a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f0:	f7fd fed2 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <UART_SetConfig+0x5c0>)
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7fd fe47 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004518:	bf00      	nop
    }

    if (pclk != 0U)
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d028      	beq.n	8004572 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	4a10      	ldr	r2, [pc, #64]	; (8004568 <UART_SetConfig+0x5c4>)
 8004526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800452a:	461a      	mov	r2, r3
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	441a      	add	r2, r3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d910      	bls.n	800456c <UART_SetConfig+0x5c8>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d20c      	bcs.n	800456c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	b29a      	uxth	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	e009      	b.n	8004572 <UART_SetConfig+0x5ce>
 800455e:	bf00      	nop
 8004560:	40008000 	.word	0x40008000
 8004564:	00f42400 	.word	0x00f42400
 8004568:	08004b94 	.word	0x08004b94
      }
      else
      {
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2201      	movs	r2, #1
 8004576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2201      	movs	r2, #1
 800457e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2200      	movs	r2, #0
 800458c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800458e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004592:	4618      	mov	r0, r3
 8004594:	3730      	adds	r7, #48	; 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800459c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01a      	beq.n	80046b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469a:	d10a      	bne.n	80046b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	605a      	str	r2, [r3, #4]
  }
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046f0:	f7fc fba2 	bl	8000e38 <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b08      	cmp	r3, #8
 8004702:	d10e      	bne.n	8004722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f82f 	bl	8004776 <UART_WaitOnFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e025      	b.n	800476e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d10e      	bne.n	800474e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f819 	bl	8004776 <UART_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e00f      	b.n	800476e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b09c      	sub	sp, #112	; 0x70
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	4613      	mov	r3, r2
 8004784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004786:	e0a9      	b.n	80048dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	f000 80a5 	beq.w	80048dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fc fb51 	bl	8000e38 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d140      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047bc:	667b      	str	r3, [r7, #100]	; 0x64
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e6      	bne.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3308      	adds	r3, #8
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	663b      	str	r3, [r7, #96]	; 0x60
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e069      	b.n	80048fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d051      	beq.n	80048dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004846:	d149      	bne.n	80048dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	637b      	str	r3, [r7, #52]	; 0x34
 8004872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e6      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	613b      	str	r3, [r7, #16]
   return(result);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	66bb      	str	r3, [r7, #104]	; 0x68
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3308      	adds	r3, #8
 80048a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048a4:	623a      	str	r2, [r7, #32]
 80048a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	69f9      	ldr	r1, [r7, #28]
 80048aa:	6a3a      	ldr	r2, [r7, #32]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e010      	b.n	80048fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4013      	ands	r3, r2
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	bf0c      	ite	eq
 80048ec:	2301      	moveq	r3, #1
 80048ee:	2300      	movne	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	f43f af46 	beq.w	8004788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3770      	adds	r7, #112	; 0x70
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004906:	b480      	push	{r7}
 8004908:	b085      	sub	sp, #20
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UARTEx_DisableFifoMode+0x16>
 8004918:	2302      	movs	r3, #2
 800491a:	e027      	b.n	800496c <HAL_UARTEx_DisableFifoMode+0x66>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2224      	movs	r2, #36	; 0x24
 8004928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800494a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e02d      	b.n	80049ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	; 0x24
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0201 	bic.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f84f 	bl	8004a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e02d      	b.n	8004a68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2224      	movs	r2, #36	; 0x24
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f811 	bl	8004a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a90:	e031      	b.n	8004af6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a92:	2308      	movs	r3, #8
 8004a94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a96:	2308      	movs	r3, #8
 8004a98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	0e5b      	lsrs	r3, r3, #25
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	0f5b      	lsrs	r3, r3, #29
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004aba:	7bbb      	ldrb	r3, [r7, #14]
 8004abc:	7b3a      	ldrb	r2, [r7, #12]
 8004abe:	4911      	ldr	r1, [pc, #68]	; (8004b04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ac0:	5c8a      	ldrb	r2, [r1, r2]
 8004ac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ac6:	7b3a      	ldrb	r2, [r7, #12]
 8004ac8:	490f      	ldr	r1, [pc, #60]	; (8004b08 <UARTEx_SetNbDataToProcess+0x98>)
 8004aca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	7b7a      	ldrb	r2, [r7, #13]
 8004adc:	4909      	ldr	r1, [pc, #36]	; (8004b04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ade:	5c8a      	ldrb	r2, [r1, r2]
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ae4:	7b7a      	ldrb	r2, [r7, #13]
 8004ae6:	4908      	ldr	r1, [pc, #32]	; (8004b08 <UARTEx_SetNbDataToProcess+0x98>)
 8004ae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	08004bac 	.word	0x08004bac
 8004b08:	08004bb4 	.word	0x08004bb4

08004b0c <__libc_init_array>:
 8004b0c:	b570      	push	{r4, r5, r6, lr}
 8004b0e:	4d0d      	ldr	r5, [pc, #52]	; (8004b44 <__libc_init_array+0x38>)
 8004b10:	4c0d      	ldr	r4, [pc, #52]	; (8004b48 <__libc_init_array+0x3c>)
 8004b12:	1b64      	subs	r4, r4, r5
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	2600      	movs	r6, #0
 8004b18:	42a6      	cmp	r6, r4
 8004b1a:	d109      	bne.n	8004b30 <__libc_init_array+0x24>
 8004b1c:	4d0b      	ldr	r5, [pc, #44]	; (8004b4c <__libc_init_array+0x40>)
 8004b1e:	4c0c      	ldr	r4, [pc, #48]	; (8004b50 <__libc_init_array+0x44>)
 8004b20:	f000 f820 	bl	8004b64 <_init>
 8004b24:	1b64      	subs	r4, r4, r5
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	2600      	movs	r6, #0
 8004b2a:	42a6      	cmp	r6, r4
 8004b2c:	d105      	bne.n	8004b3a <__libc_init_array+0x2e>
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b34:	4798      	blx	r3
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7ee      	b.n	8004b18 <__libc_init_array+0xc>
 8004b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b3e:	4798      	blx	r3
 8004b40:	3601      	adds	r6, #1
 8004b42:	e7f2      	b.n	8004b2a <__libc_init_array+0x1e>
 8004b44:	08004bc4 	.word	0x08004bc4
 8004b48:	08004bc4 	.word	0x08004bc4
 8004b4c:	08004bc4 	.word	0x08004bc4
 8004b50:	08004bc8 	.word	0x08004bc8

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
